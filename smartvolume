#!/usr/bin/env python3
# vim: ft=python :

import importlib
import os

# Decorators
class __ArgumentFunction():
    def __init__(self, f, name, descr, args):
        self.f = f
        self.name = name
        self.descr = descr
        self.args = args

    def __call__(self, *args)
        self.f(*args)

class ArgumentFunction()
    def __init__(self, name, descr, args):
        self.name = name
        self.descr = descr
        self.args = args

    def __call__(self, f)
        return __ArgumentFunction(f, self.name, self.descr, self.args)

from modules import svcore_config, svcore_except

funcmodules = []

for item in os.listdir("functions"):
    funcmodules.append(importlib.import_module("functions/" + item)
